# Rule: AI-Assisted Task Generation Workflow

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format. This task list is derived from a technical `plan.md` file and should be comprehensive, actionable, and designed to guide a junior developer through the implementation of a feature.

## Core Principles

- **Derivation from Plan**: Tasks must be a direct decomposition of the steps outlined in the `plan.md` file.
- **Actionable and Granular**: Each task should be a small, concrete step a developer can complete. Sub-tasks provide the necessary granularity for implementation details.- **Context is Key**: Tasks should reference the "why" from the plan.

- **Structured Output**: Consistent Markdown formatting ensures readability and ease of use.
- **Co-location**: The final `tasks.md` is stored alongside its corresponding `plan.md` and `prd.md` for clear organization and traceability.

## Process

1.  **Analyze Inputs**: The AI reads and thoroughly analyzes the `plan.md` as the primary source of truth. It should focus on the "Step-by-Step Task Breakdown" and the "Testing Strategy" sections.
2.  **Generate Task List**: Based on the `plan.md`, the AI will generate the full task list.
    - **Parent Tasks**: These should correspond directly to the items in the "Step-by-Step Task Breakdown" from the `plan.md`.
    - **Sub-Tasks**: Break down each parent task into smaller, actionable implementation steps.
3.  **Add Developer Aids**:
    - **Prerequisites**: Extract any environment setup or package installation steps into a "Prerequisites" section at the top.
    - **Link Files**: In the "Relevant Files" section, format each file path as a clickable markdown link (e.g., `[`convex/schema.ts`](./convex/schema.ts)`).
    - **Add Context**: For key tasks, add a blockquote explaining _why_ a step is necessary, referencing the plan (e.g., "> As per the plan, we must validate the webhook signature to prevent fraudulent requests.").
    - **Suggest Scaffolding**: For tasks that involve creating new files, provide a basic code scaffold to get the developer started.
4.  **Generate Final Output**: Combine the prerequisites, file links, and tasks into the final Markdown structure.
5.  **Save Task List**: Save the generated document as `tasks.md` inside the same story directory as the `plan.md`.

## Output

- **Format**: Markdown (`.md`)
- **Location**: `/_epics/[epic-id]-[story-name]/tasks.md`
- **Filename**: `tasks.md`

## Output Format

The generated `tasks.md` must follow this structure:

````markdown
# Tasks for [Feature Name from Plan]

## Prerequisites

- [ ] Run `npm install stripe react-native-webview`.
- [ ] Add `STRIPE_SECRET_KEY` and `STRIPE_WEBHOOK_SECRET` to your Convex environment variables.
- [ ] In the Stripe Dashboard, configure a webhook endpoint to point to `<your-convex-url>/stripe-webhooks` and listen for `identity.verification_session.verified`.

## Relevant Files

- [`convex/schema.ts`](./convex/schema.ts)
- [`convex/stripe.ts`](./convex/stripe.ts)
- [`app/modal.tsx`](./app/modal.tsx)
- [`components/VerificationPromptBanner.tsx`](./components/VerificationPromptBanner.tsx)

## Tasks

- [ ] 1.0 Update Database Schema
  - [ ] 1.1 In `convex/schema.ts`, add a new table named `profiles`.
  - [ ] 1.2 Define the table fields: `userId (v.string())`, `name (v.string())`, and `profilePhotoUrl (v.optional(v.string()))`.
  - [ ] 1.3 Run `npx convex dev` to push the schema changes.
- [ ] 2.0 Implement Backend Logic
  - [ ] 2.1 Create a new file `convex/profiles.ts`.
  - [ ] 2.2 In this file, implement a `createProfile` mutation.
  - [ ] 2.3 The mutation should accept `name` and an optional `profilePhotoUrl` and create a document in the `profiles` table.
- [ ] 3.0 Implement Profile Creation UI
  - [ ] 3.1 Create the `create-profile.tsx` screen component.
  - [ ] 3.2 Add a text input for the user's `name`.
  - [ ] 3.3 Add the `ProfileImageUploader` component to the screen.
  - [ ] 3.4 Add a "Save Profile" button that calls the `createProfile` mutation.

```

## Target Audience

Assume the primary reader of the task list is a junior developer who will implement the feature. Tasks should be explicit, unambiguous, and provide enough detail for them to understand the individual steps and core logic required for implementation.

## Final Instructions for the AI

- Your role is to generate this task list, not to implement the code.
- Always use the `plan.md` as the primary source for generating tasks.
- Ensure the task list is clear, actionable, and structured as defined above to provide maximum utility to the developer.

- Do NOT start implementing the feature or writing code. Your role is solely to generate the task list documentation.
- Always use the `plan.md` as the primary source for generating tasks.
- Ensure the task list is clear, concise, actionable, and structured as defined above.
```
````

- Always use the `plan.md` as the primary source for generating tasks.
- Ensure the task list is clear, concise, actionable, and structured as defined above.

```

```
