---
description:
globs:
alwaysApply: false
---

---

description:
globs:
alwaysApply: false

---

# Rule: AI-Assisted Task Generation Workflow

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format. This task list is derived from a technical `plan.md` file and should be comprehensive, actionable, and designed to guide a junior developer through the implementation of a feature.

## Core Principles

- **Derivation from Plan**: Tasks must be a direct decomposition of the steps outlined in the `plan.md` file.
- **Actionable and Granular**: Each task should be a small, concrete step a developer can complete. Sub-tasks provide the necessary granularity for implementation details.
- **Structured Output**: Consistent Markdown formatting ensures readability and ease of use.
- **Co-location**: The final `tasks.md` is stored alongside its corresponding `plan.md` and `prd.md` for clear organization and traceability.

## Process

1.  **Receive Plan Reference**: The user points the AI to a specific `plan.md` file (e.g., `/_epics/001-story-name/plan.md`).
2.  **Analyze Inputs**: The AI reads and thoroughly analyzes the `plan.md` as the primary source of truth. It should focus on the "Step-by-Step Task Breakdown" and the file modification/creation sections. The `context.md` and `prd.md` should be used for any necessary background context.
3.  **Generate Task List**: Based on the `plan.md`, the AI will generate the full task list. This includes:
    - **Parent Tasks**: These should correspond directly to the items in the "Step-by-Step Task Breakdown" from the `plan.md`.
    - **Sub-Tasks**: Break down each parent task into smaller, actionable implementation steps (e.g., "add a specific form field," "implement a single function," "style a button").
4.  **Populate Relevant Files**: The "Relevant Files" section should be populated directly from the file sections in the `plan.md`.
5.  **Generate Final Output**: Combine the parent tasks, sub-tasks, and relevant files into the final Markdown structure specified below.
6.  **Save Task List**: Save the generated document as `tasks.md` inside the same story directory as the `plan.md`.

## Output

- **Format**: Markdown (`.md`)
- **Location**: `/_epics/[epic-id]-[story-name]/tasks.md`
- **Filename**: `tasks.md`

## Output Format

The generated task list must follow this structure:

```markdown
# Tasks for [Feature Name from Plan]

## Relevant Files

- `convex/schema.ts` - For updating the database schema with the new `profiles` table.
- `convex/profiles.ts` - To create the new backend mutations for profile creation.
- `app/(main)/create-profile.tsx` - The new screen for the user to create their profile.
- `components/ProfileImageUploader.tsx` - Reusable component for uploading a profile image.
- `components/ProfileImageUploader.test.tsx` - Unit tests for the uploader component.

### Notes

- Unit tests should typically be placed alongside the code files they are testing.
- Use `npx jest [optional/path/to/test/file]` to run tests.

## Tasks

- [ ] 1.0 Update Database Schema
  - [ ] 1.1 In `convex/schema.ts`, add a new table named `profiles`.
  - [ ] 1.2 Define the table fields: `userId (v.string())`, `name (v.string())`, and `profilePhotoUrl (v.optional(v.string()))`.
  - [ ] 1.3 Run `npx convex dev` to push the schema changes.
- [ ] 2.0 Implement Backend Logic
  - [ ] 2.1 Create a new file `convex/profiles.ts`.
  - [ ] 2.2 In this file, implement a `createProfile` mutation.
  - [ ] 2.3 The mutation should accept `name` and an optional `profilePhotoUrl` and create a document in the `profiles` table.
- [ ] 3.0 Implement Profile Creation UI
  - [ ] 3.1 Create the `create-profile.tsx` screen component.
  - [ ] 3.2 Add a text input for the user's `name`.
  - [ ] 3.3 Add the `ProfileImageUploader` component to the screen.
  - [ ] 3.4 Add a "Save Profile" button that calls the `createProfile` mutation.
```

## Target Audience

Assume the primary reader of the task list is a junior developer who will implement the feature. Tasks should be explicit, unambiguous, and provide enough detail for them to understand the individual steps and core logic required for implementation.

## Final Instructions for the AI

- Do NOT start implementing the feature or writing code. Your role is solely to generate the task list documentation.
- Always use the `plan.md` as the primary source for generating tasks.
- Ensure the task list is clear, concise, actionable, and structured as defined above.
