# The 4-Step AI-Assisted Software Development Lifecycle (SDLC)

**Note**: This document describes a generic, project-agnostic process. All project-specific documentation, including directory structure, architectural patterns, data models, and feature definitions, are located in the root `_docs` directory. Your primary function is to synthesize the generic process described here with the specific context found in `_docs`.

This document outlines a structured, 4-step workflow designed to leverage Large Language Models (LLMs) for high-quality, consistent, and maintainable software development. The process breaks down development into distinct phases, each with a specific goal, a designated AI assistant "persona," and a clear set of artifacts.

The core structure is organized around **Epics** and **Stories**:

- **Epic**: A large feature or initiative (e.g., "User Profile System").
- **Story**: A smaller, actionable piece of work within an Epic (e.g., "Create user database model" or "Build profile page API").

All work is organized in the `_epics` directory:

```
/epics
└── /001-user-profiles/
    ├── prd.md                 <-- High-level PRD for the Epic
    ├── architecture.md        <-- (Optional) For complex epics
    └── /stories/
        ├── /01-create-user-model/
        │   └── story-plan.md  <-- Detailed implementation plan for the story
        └── /02-build-profile-api/
            └── story-plan.md  <-- Detailed implementation plan for the story
```

---

## The Workflow

### Step 1: Define the Epic (AI Persona: Product Manager)

- **Goal**: To translate a high-level feature idea into a structured Product Requirements Document (PRD).
- **Trigger**: A human provides a feature concept (e.g., "Let's add user profiles").
- **AI Instruction File**: `rules/process/01_define_epic.mdc`
- **Template Used**: `.cursor/templates/template-prd.md`
- **Process**:
  1.  The AI assistant acts as a **Product Manager**.
  2.  It takes the high-level goal and generates a comprehensive `prd.md`.
  3.  This PRD outlines the feature's goals, requirements, and, critically, breaks it down into a list of user **Stories**.
- **Outcome**: A complete `prd.md` file stored in a new epic folder (e.g., `_epics/001-user-profiles/prd.md`).

### Step 2: Plan the Story (AI Persona: Tech Lead)

- **Goal**: To convert a user story into a testable specification. This workflow uses a **test-alongside development** approach, where tests are defined before the implementation.
- **Trigger**: A human selects a story from the `prd.md`.
- **AI Instruction File**: `rules/process/02_plan_story.mdc`
- **Process**:
  1.  The AI assistant acts as a **Tech Lead** with a test-first mindset.
  2.  It first defines the **test cases** that will prove the feature is working correctly (happy paths, edge cases, error states).
  3.  It then outlines the implementation tasks required to make those tests pass.
- **Outcome**: A `story-plan.md` where the test cases form the core of the plan.

### Step 3: Implement the Story (AI Persona: Developer)

- **Goal**: To write code that makes the pre-defined tests in the story plan pass.
- **Trigger**: A human initiates the implementation of a `story-plan.md`.
- **AI Instruction File**: `rules/process/03_implement_story.mdc`
- **Process**:
  1.  The AI assistant acts as a **Developer**, whose primary job is to make the tests in the `Validation Loop` pass.
  2.  It writes the implementation code, guided by the tasks in the story plan.
  3.  It continuously runs the **Validation Loop** commands. This self-correction cycle of "run test -> see fail -> write code -> run test -> see pass" is the core of the implementation work.
- **Outcome**: Working code where all tests from the `Validation Loop` pass successfully.

### Step 4: Review and Refine (AI Persona: QA Engineer / Architect)

- **Goal**: To review the newly implemented code for quality, integration issues, and alignment with the overall project architecture.
- **Trigger**: The developer AI reports successful implementation of a story.
- **AI Instruction File**: `rules/process/04_review_story.mdc`
- **Process**:
  1.  The AI assistant acts as a **QA Engineer** and **Architect**.
  2.  It re-reads the original PRD and story plan to ensure all requirements were met.
  3.  It analyzes the new code in the context of the entire codebase, looking for integration issues, edge cases, or deviations from established patterns.
  4.  It identifies if any project documentation (like the PRD or an architecture diagram) needs to be updated based on the final implementation.
- **Outcome**: A review summary, which may include recommendations for refactoring, new tasks for a follow-up story, or updates to project documentation.
