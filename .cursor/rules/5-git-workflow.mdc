# Development Workflow: Branching, Committing, and Pull Requests

This document outlines the standard process for creating branches, committing code, and submitting pull requests. Following these guidelines ensures a consistent and understandable version control history.

## 1. Branching

All new work should be done on a feature branch. Branches should be created from the `main` branch.

### Branch Naming Convention

Branches should be named using the following pattern:

`epic-{epic_number}/{story_number}-{kebab-case-story-name}`

- `{epic_number}`: The number of the epic the story belongs to.
- `{story_number}`: The number of the story.
- `{kebab-case-story-name}`: A short, descriptive name for the story in kebab-case.

**Example:**

For a story like `@/02 Social Profile Creation` which is part of epic `01`, the branch name would be:

`epic-01/02-social-profile-creation`

### Checking for Existing Branches

Before creating a new branch, check if a branch for the story already exists.

```bash
git branch --list 'epic-01/02-*'
```

If a branch for your story already exists, switch to it instead of creating a new one:

```bash
git checkout epic-01/02-social-profile-creation
```

### Creating a New Branch

If a branch does not exist, create and switch to it:

```bash
git checkout -b epic-01/02-social-profile-creation
```

## 2. Committing

Once you have made changes, you need to commit them.

### Staging Changes

Add all relevant changes to the staging area.

```bash
git add .
```

### Commit Messages

We follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) specification. Your commit messages should be structured as follows:

`<type>(<scope>): <subject>`

- **type**: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`.
- **scope**: The part of the codebase you're changing (e.g., `auth`, `profile`, `onboarding`).
- **subject**: A short, imperative-tense description of the change.

**Example Commit Message:**

```
feat(profile): Implement basic UI for social profile setup
```

**To commit your staged changes:**

```bash
git commit -m "feat(profile): Implement basic UI for social profile setup"
```

## 3. Pushing

Push your branch to the remote repository. The `-u` flag sets the upstream branch.

```bash
git push -u origin epic-01/02-social-profile-creation
```

## 4. Creating a Pull Request (PR)

Once your branch is pushed, the AI assistant will create a Pull Request on GitHub using the `gh` CLI.

### PR Title

The PR title should be clear and concise, similar to your primary commit message.

**Example:**

`feat(profile): Social Profile Creation`

### PR Body

The PR body will be populated from a template, but should include:

- **Link to the Story:** Reference the story file path (e.g., `_epics/01-foundational-user-host-lifecycle/stories/02 Social Profile Creation`).
- **Changes Made:** A summary of what was implemented.

**CLI Command for the Assistant:**

```bash
gh pr create --title "feat(profile): Social Profile Creation" --body "Closes #issue_number. Implements the social profile creation feature as described in the story."
```

## 5. Returning to Main

After creating the pull request, the assistant will switch back to the `main` branch to ensure a clean working state.

```bash
git checkout main
```

By following this process, we maintain a clean and traceable project history, making it easier for everyone to collaborate effectively.

# 6. Pull Changes from Main

Lastly, pull the latest changes from the `main` branch to ensure your branch is up to date.

```bash
git pull origin main
```
